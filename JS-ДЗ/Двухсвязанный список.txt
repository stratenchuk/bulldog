class Node {
    constructor(data) {
        this.data = data;
        this.prev = null;
        this.next = null;
    }
}

class DoublyLinkedList {
    constructor() {
        this.head = null;
        this.tail = null;
        this.length = 0;
    }

    append(data) {
        const newNode = new Node(data);
        if (!this.head) { // Если список пуст
            this.head = newNode;
            this.tail = newNode;
        } else {
            this.tail.next = newNode;
            newNode.prev = this.tail;
            this.tail = newNode;
        }
        this.length++;
    }

    display() {
        let current = this.head;
        while (current) {
            process.stdout.write(current.data + ' ');
            current = current.next;
        }
        console.log();
    }

    size() {
        return this.length;
    }

    insertAfter(targetData, newData) {
        let current = this.head;
        while (current) {
            if (current.data === targetData) {
                const newNode = new Node(newData);
                newNode.next = current.next;
                newNode.prev = current;
                if (current.next) { // Если не последний узел
                    current.next.prev = newNode;
                }
                current.next = newNode;
                if (current === this.tail) { // Если вставляем в конец
                    this.tail = newNode;
                }
                this.length++;
                return;
            }
            current = current.next;
        }
        console.log(`Узел с данными ${targetData} не найден.`);
    }

    update(oldData, newData) {
        let current = this.head;
        while (current) {
            if (current.data === oldData) {
                current.data = newData;
                return;
            }
            current = current.next;
        }
        console.log(`Узел с данными ${oldData} не найден.`);
    }

    remove(data) {
        let current = this.head;
        while (current) {
            if (current.data === data) {
                if (current.prev) { // Если не первый узел
                    current.prev.next = current.next;
                }
                if (current.next) { // Если не последний узел
                    current.next.prev = current.prev;
                }
                if (current === this.head) { // Если это голова
                    this.head = current.next;
                }
                if (current === this.tail) { // Если это хвост
                    this.tail = current.prev;
                }
                this.length--;
                return;
            }
            current = current.next;
        }
        console.log(`Узел с данными ${data} не найден.`);
    }
}
